class Feature {
  static get hiddenProperties() {
    return [
      'api',
      'app',
      'config',
      'extends',
      'lifecycle',
      'lib'
    ];
  }

  static get isApplication() {
    return false;
  }

  static get isFeature() {
    return true;
  }

  static isChild(obj) {
   return !!obj && this.isParent.call(obj, this);
  }

  static isDirectChild(obj) {
   return !!obj && this.isDirectParent.call(obj, this);
  }

  static isDirectParent(obj) {
   return !!obj && obj.prototype.__proto__ === this.prototype;
  }


  static isParent(obj) {
   return !!obj && obj.prototype instanceof this;
  }

  static isInstance(obj) {
    return obj instanceof this;
  }

  constructor(pod, app) {
    (log => log('NEW', pod.id, '<--', pod.pkg.name, '@', pod.pkg.version))
      ((logger => logger && logger.info)
        (app && app.log || this.log ||Â console));
  }
  
  get log() {
    return this.app && this.app.log;
  }

  canHandleUsage() {
    return false;
  }

  onCreate(done) {
    done && done();
  }

  onDestroy(done) {
    done && done();
  }

  onLoad(done) {
    done && done();
  }

  onReady(done) {
    done && done();
  }

  use() {
    throw new Error('use() must be overridden in '+ this.paths.main);
  }
}

module.exports = Feature;
