const Feature = require('app.feature');
const path = require('path');

class Application extends Feature {
  static get hiddenProperties() {
    return [
      'argv',
      'env',
      'features'
    ];
  }

  static get isApplication() {
    return true;
  }

  canHandleUsage() {
    return !!this.findFeatureHandler.apply(this, arguments);
  }

  findFeatureHandler() {
    return this._features
      .find(f => f.canHandleUsage.apply(f, arguments));
  }

  get log() {
    return this.features && this.features.log && this.features.log.api ||Â console;
  }

  hasFeature(fid) {
    return !!this.features[fid];
  }

  require(request) {
    return require(this.resolve(request));
  }

  resolve(request, safe) {
    return this.lib.util.resolveFrom(this.paths.root, request, safe);
  }

  resolveFilename(...args) {
    return path.resolve.apply(null, [this.paths.root].concat(args));
  }

  use(fn) {
    if (!this._bound) {
      throw new Error('NOT_READY_TO_BE_USED');
    }

    const handler = this.findFeatureHandler.apply(this, arguments);

    if (!handler) {
      throw new Error('HANDLER_NOT_FOUND');
    }

    return handler.use.apply(handler, arguments);
  }
}

module.exports = Application;
