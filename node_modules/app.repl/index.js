const Feature = require('app.feature');
const REPL = require('repl');
const path = require('path');

class Repl extends Feature {
  static get config() {
    // https://nodejs.org/api/repl.html#repl_repl_start_options
    return {
      enable: false,

      saveWhenProcessEmit: [
        'exit',
        'SIGUSR2'
      ],

      // NODE_REPL_HISTORY - When a valid path is given, persistent REPL history
      // will be saved to the specified file. Setting this value to "" will
      // disable persistent REPL history. Whitespace will be trimmed from the value.
      history: '.node_repl_history',

      // NODE_REPL_MODE - May be any of "sloppy", "strict", or "magic".
      // Defaults to "magic", which will automatically run "strict mode only"
      // statements in strict mode.
      replMode: 'magic',

      // See https://goo.gl/aOVzpj for eamples
      promptStyle: '\u001b[1;34m',

      // NODE_REPL_HISTORY_SIZE - Controls how many lines of history will
      // be persisted if history is available. Must be a positive number.
      historySize: 1000,

      // If true, specifies that the default writer function should include
      // ANSI color styling to REPL output.
      // Defaults provide by package supports-color (from chalk)
      useColors: undefined
    };
  }

  constructor(pod, app) {
    super(pod.lib.prepareConfig(pod), app);
  }

  onCreate(done) {
    if (!this.api) {
      this.api =  REPL.start(Object.assign({}, this.config,Â {prompt:''}));
    }

    !this.api.paused && this.api.pause();

    super.onCreate(done);
  }

  onLoad(done) {
    const {app, api, config, lib} = this;
    const bindApp = () => Object.defineProperty(api.context, 'app', {
      configurable: true,
      value: app
    });

    config.saveWhenProcessEmit
      .map(event => process.once.bind(process, event))
      .forEach(register => register(lib.saveHistory.bind(null, this)));

    lib.loadHistory(this);

    bindApp();
    api.on('reset', () => bindApp());

    config.enable && app._loading.then(() => this.enable());

    super.onLoad(done);
  }

  disable() {
    const {app, api, config, lib} = this;

    api.input.pause();

    api.setPrompt('');

    lib.unbindInspectors(this);

    this.config.enable = false;
  }

  enable() {
    const {app, api, config, lib} = this;

    lib.bindInspectors(this);

    api.setPrompt(config.prompt)

    api.write('', {name: 'return'});

    api.paused && api.resume();
    api.input.resume();

    this.config.enable = true;
  }
}

module.exports = Repl;
